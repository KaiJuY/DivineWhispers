"""initial migration with all tables

Revision ID: 483518652002
Revises: 
Create Date: 2025-10-22 23:04:43.924665

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision: str = '483518652002'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Apply database schema changes (forward migration)."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('chat_sessions', schema=None) as batch_op:
        batch_op.drop_index('ix_chat_sessions_id')
        batch_op.drop_index('ix_chat_sessions_user_id')

    op.drop_table('chat_sessions')
    with op.batch_alter_table('fortune_jobs', schema=None) as batch_op:
        batch_op.drop_index('idx_fortune_jobs_created_at')
        batch_op.drop_index('idx_fortune_jobs_status')
        batch_op.drop_index('idx_fortune_jobs_type')
        batch_op.drop_index('idx_fortune_jobs_user_id')
        batch_op.drop_index('idx_fortune_jobs_user_status')

    op.drop_table('fortune_jobs')
    with op.batch_alter_table('faq_feedback', schema=None) as batch_op:
        batch_op.drop_index('ix_faq_feedback_faq_id')
        batch_op.drop_index('ix_faq_feedback_id')

    op.drop_table('faq_feedback')
    with op.batch_alter_table('faqs', schema=None) as batch_op:
        batch_op.drop_index('ix_faqs_id')
        batch_op.drop_index('ix_faqs_slug')

    op.drop_table('faqs')
    with op.batch_alter_table('chat_messages', schema=None) as batch_op:
        batch_op.drop_index('ix_chat_messages_id')
        batch_op.drop_index('ix_chat_messages_session_id')
        batch_op.drop_index('ix_chat_messages_user_id')

    op.drop_table('chat_messages')
    with op.batch_alter_table('email_verification_tokens', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.NUMERIC(),
               type_=sa.Integer(),
               nullable=False,
               autoincrement=True)
        batch_op.alter_column('is_used',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
        batch_op.alter_column('created_at',
               existing_type=sa.NUMERIC(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
        batch_op.alter_column('expires_at',
               existing_type=sa.NUMERIC(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
        batch_op.drop_index('idx_email_verification_tokens_email')
        batch_op.drop_index('idx_email_verification_tokens_token')
        batch_op.drop_index('idx_email_verification_tokens_user_id')
        batch_op.create_index(batch_op.f('ix_email_verification_tokens_email'), ['email'], unique=False)
        batch_op.create_index(batch_op.f('ix_email_verification_tokens_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_email_verification_tokens_token'), ['token'], unique=True)
        batch_op.create_index(batch_op.f('ix_email_verification_tokens_user_id'), ['user_id'], unique=False)

    with op.batch_alter_table('wallets', schema=None) as batch_op:
        batch_op.alter_column('wallet_id',
               existing_type=sa.INTEGER(),
               nullable=False,
               autoincrement=True)
        batch_op.alter_column('balance',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
        batch_op.create_index('idx_wallets_updated_at', ['updated_at'], unique=False)
        batch_op.create_index('idx_wallets_user_id', ['user_id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Revert database schema changes (backward migration)."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('wallets', schema=None) as batch_op:
        batch_op.drop_index('idx_wallets_user_id')
        batch_op.drop_index('idx_wallets_updated_at')
        batch_op.alter_column('balance',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=False)
        batch_op.alter_column('wallet_id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)

    with op.batch_alter_table('email_verification_tokens', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_email_verification_tokens_user_id'))
        batch_op.drop_index(batch_op.f('ix_email_verification_tokens_token'))
        batch_op.drop_index(batch_op.f('ix_email_verification_tokens_id'))
        batch_op.drop_index(batch_op.f('ix_email_verification_tokens_email'))
        batch_op.create_index('idx_email_verification_tokens_user_id', ['user_id'], unique=False)
        batch_op.create_index('idx_email_verification_tokens_token', ['token'], unique=False)
        batch_op.create_index('idx_email_verification_tokens_email', ['email'], unique=False)
        batch_op.alter_column('expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.NUMERIC(),
               existing_nullable=False)
        batch_op.alter_column('created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=sa.NUMERIC(),
               existing_nullable=False,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
        batch_op.alter_column('is_used',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('(FALSE)'),
               existing_nullable=False)
        batch_op.alter_column('id',
               existing_type=sa.Integer(),
               type_=sa.NUMERIC(),
               nullable=True,
               autoincrement=True)

    op.create_table('chat_messages',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('session_id', sa.INTEGER(), nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('message_type', sa.VARCHAR(length=20), nullable=False),
    sa.Column('content', sa.TEXT(), nullable=False),
    sa.Column('message_metadata', sqlite.JSON(), nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['chat_sessions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('chat_messages', schema=None) as batch_op:
        batch_op.create_index('ix_chat_messages_user_id', ['user_id'], unique=False)
        batch_op.create_index('ix_chat_messages_session_id', ['session_id'], unique=False)
        batch_op.create_index('ix_chat_messages_id', ['id'], unique=False)

    op.create_table('faqs',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('category', sa.VARCHAR(length=50), nullable=False),
    sa.Column('question', sa.VARCHAR(length=500), nullable=False),
    sa.Column('answer', sa.TEXT(), nullable=False),
    sa.Column('slug', sa.VARCHAR(length=200), nullable=False),
    sa.Column('tags', sa.VARCHAR(length=500), nullable=True),
    sa.Column('is_published', sa.BOOLEAN(), nullable=True),
    sa.Column('display_order', sa.INTEGER(), nullable=True),
    sa.Column('view_count', sa.INTEGER(), nullable=True),
    sa.Column('helpful_votes', sa.INTEGER(), nullable=True),
    sa.Column('created_by', sa.INTEGER(), nullable=False),
    sa.Column('updated_by', sa.INTEGER(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('faqs', schema=None) as batch_op:
        batch_op.create_index('ix_faqs_slug', ['slug'], unique=False)
        batch_op.create_index('ix_faqs_id', ['id'], unique=False)

    op.create_table('faq_feedback',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('faq_id', sa.INTEGER(), nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=True),
    sa.Column('is_helpful', sa.BOOLEAN(), nullable=False),
    sa.Column('feedback_text', sa.TEXT(), nullable=True),
    sa.Column('user_agent', sa.VARCHAR(length=500), nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), nullable=True),
    sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['faq_id'], ['faqs.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('faq_feedback', schema=None) as batch_op:
        batch_op.create_index('ix_faq_feedback_id', ['id'], unique=False)
        batch_op.create_index('ix_faq_feedback_faq_id', ['faq_id'], unique=False)

    op.create_table('fortune_jobs',
    sa.Column('id', sa.VARCHAR(length=36), nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=36), nullable=False),
    sa.Column('job_type', sa.VARCHAR(length=17), nullable=False),
    sa.Column('status', sa.VARCHAR(length=10), nullable=False),
    sa.Column('payload', sqlite.JSON(), nullable=True),
    sa.Column('result_data', sqlite.JSON(), nullable=True),
    sa.Column('error_message', sa.VARCHAR(length=1000), nullable=True),
    sa.Column('started_at', sa.DATETIME(), nullable=True),
    sa.Column('completed_at', sa.DATETIME(), nullable=True),
    sa.Column('expires_at', sa.DATETIME(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('fortune_jobs', schema=None) as batch_op:
        batch_op.create_index('idx_fortune_jobs_user_status', ['user_id', 'status'], unique=False)
        batch_op.create_index('idx_fortune_jobs_user_id', ['user_id'], unique=False)
        batch_op.create_index('idx_fortune_jobs_type', ['job_type'], unique=False)
        batch_op.create_index('idx_fortune_jobs_status', ['status'], unique=False)
        batch_op.create_index('idx_fortune_jobs_created_at', ['created_at'], unique=False)

    op.create_table('chat_sessions',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('session_name', sa.VARCHAR(length=200), nullable=True),
    sa.Column('context_data', sqlite.JSON(), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('chat_sessions', schema=None) as batch_op:
        batch_op.create_index('ix_chat_sessions_user_id', ['user_id'], unique=False)
        batch_op.create_index('ix_chat_sessions_id', ['id'], unique=False)

    # ### end Alembic commands ###
